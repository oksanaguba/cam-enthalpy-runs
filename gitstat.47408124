 status is ------------- 
On branch cam_energy_analysis
Your branch is up to date with 'origin/cam_energy_analysis'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   physics/cam/check_energy.F90
	modified:   physics/cam/physics_types.F90
	modified:   physics/cam/physpkg.F90

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	../config_machines.xml_
	atmos_phys/
	gitstat.47273935
	gitstat.47408124

no changes added to commit (use "git add" and/or "git commit -a")
 branch is ------------- 
* cam_energy_analysis
  master
 diffs are ------------- 
diff --git a/src/physics/cam/check_energy.F90 b/src/physics/cam/check_energy.F90
index 1124b3f5..9d6bab2d 100644
--- a/src/physics/cam/check_energy.F90
+++ b/src/physics/cam/check_energy.F90
@@ -2165,9 +2165,9 @@ end subroutine check_energy_get_integrals
     integer :: ncol                      ! number of active columns
     integer :: lchnk                     ! chunk index
 
-    real(r8) :: te(pcols,begchunk:endchunk,3)
+    real(r8) :: te(pcols,begchunk:endchunk,7)
                                          ! total energy of input/output states (copy)
-    real(r8) :: te_glob(3)               ! global means of total energy
+    real(r8) :: te_glob(7)               ! global means of total energy
     real(r8), pointer :: teout(:)
 !-----------------------------------------------------------------------
 
@@ -2182,11 +2182,19 @@ end subroutine check_energy_get_integrals
        te(:ncol,lchnk,2) = teout(1:ncol)
        ! surface pressure for heating rate
        te(:ncol,lchnk,3) = state(lchnk)%pint(:ncol,pver+1)
+
+
+       te(:ncol,lchnk,4) = state(lchnk)%tebefore_dme(:ncol)
+       te(:ncol,lchnk,5) = state(lchnk)%teafter_dme(:ncol)
+       te(:ncol,lchnk,6) = state(lchnk)%cpterme(:ncol)
+       te(:ncol,lchnk,7) = state(lchnk)%cptermp(:ncol)
+
+
     end do
 
     ! Compute global means of input and output energies and of
     ! surface pressure for heating rate (assume uniform ptop)
-    call gmean(te, te_glob, 3)
+    call gmean(te, te_glob, 7)
 
     if (begchunk .le. endchunk) then
        teinp_glob = te_glob(1)
@@ -2200,6 +2208,14 @@ end subroutine check_energy_get_integrals
 
        if (masterproc) then
           write(iulog,'(1x,a9,1x,i8,4(1x,e25.17))') "nstep, te", nstep, teinp_glob, teout_glob, heat_glob, psurf_glob
+
+          !make it easier to grep
+          !tebefore - teafter
+          write(iulog,'(1x,a9,1x,i8,1(1x,e25.17))') "npwstep", nstep,(te_glob(4)-te_glob(5))/dtime
+          !cptermE, cptermP
+          write(iulog,'(1x,a22,1x,i8,2(1x,e25.17))') "ncpstep,e,p", nstep,te_glob(6),te_glob(7)
+
+
        end if
     else
        heat_glob = 0._r8
diff --git a/src/physics/cam/physics_types.F90 b/src/physics/cam/physics_types.F90
index 07be3b3d..199ebcc2 100644
--- a/src/physics/cam/physics_types.F90
+++ b/src/physics/cam/physics_types.F90
@@ -98,6 +98,7 @@ module physics_types
           zi        ! geopotential height above surface at interfaces (m)
 
      real(r8), dimension(:),allocatable          :: &
+          tebefore_dme, teafter_dme, cpterme, cptermp, &
           te_ini,  &! vertically integrated total (kinetic + static) energy of initial state
           te_cur,  &! vertically integrated total (kinetic + static) energy of current state
           tw_ini,  &! vertically integrated total water of initial state
@@ -552,6 +553,19 @@ contains
          varname="state%te_ini",    msg=msg)
     call shr_assert_in_domain(state%te_cur(:ncol),      is_nan=.false., &
          varname="state%te_cur",    msg=msg)
+
+
+    call shr_assert_in_domain(state%cpterme(:ncol),      is_nan=.false., &
+         varname="state%cpterme",    msg=msg)
+     call shr_assert_in_domain(state%cptermp(:ncol),      is_nan=.false., &
+         varname="state%cptermp",    msg=msg)
+     call shr_assert_in_domain(state%tebefore_dme(:ncol),      is_nan=.false., &
+         varname="state%tebefore",    msg=msg)
+     call shr_assert_in_domain(state%teafter_dme(:ncol),      is_nan=.false., &
+         varname="state%teafter",    msg=msg)
+
+
+
     call shr_assert_in_domain(state%tw_ini(:ncol),      is_nan=.false., &
          varname="state%tw_ini",    msg=msg)
     call shr_assert_in_domain(state%tw_cur(:ncol),      is_nan=.false., &
@@ -626,6 +640,20 @@ contains
          varname="state%te_ini",    msg=msg)
     call shr_assert_in_domain(state%te_cur(:ncol),      lt=posinf_r8, gt=neginf_r8, &
          varname="state%te_cur",    msg=msg)
+
+
+
+    call shr_assert_in_domain(state%cpterme(:ncol),      lt=posinf_r8, gt=neginf_r8, &
+         varname="state%cpterme",    msg=msg)
+     call shr_assert_in_domain(state%cptermp(:ncol),      lt=posinf_r8, gt=neginf_r8, &
+         varname="state%cptermp",    msg=msg)
+     call shr_assert_in_domain(state%tebefore_dme(:ncol),      lt=posinf_r8, gt=neginf_r8, &
+         varname="state%tebefore",    msg=msg)
+     call shr_assert_in_domain(state%teafter_dme(:ncol),      lt=posinf_r8, gt=neginf_r8,&
+         varname="state%teafter",    msg=msg)
+
+
+
     call shr_assert_in_domain(state%tw_ini(:ncol),      lt=posinf_r8, gt=neginf_r8, &
          varname="state%tw_ini",    msg=msg)
     call shr_assert_in_domain(state%tw_cur(:ncol),      lt=posinf_r8, gt=neginf_r8, &
@@ -1316,8 +1344,16 @@ end subroutine physics_ptend_copy
        state_out%phis(i)   = state_in%phis(i)
        state_out%te_ini(i) = state_in%te_ini(i)
        state_out%te_cur(i) = state_in%te_cur(i)
+
+       state_out%cpterme(i) = state_in%cpterme(i)
+       state_out%cptermp(i) = state_in%cptermp(i)
+       state_out%tebefore_dme(i) = state_in%tebefore_dme(i)
+       state_out%teafter_dme(i) = state_in%teafter_dme(i)
+
        state_out%tw_ini(i) = state_in%tw_ini(i)
        state_out%tw_cur(i) = state_in%tw_cur(i)
+
+!og ignore this       
 #define te_analysis
 #ifdef te_analysis
        state_out%te_ini_diag(i,:) = state_in%te_ini_diag(i,:)
@@ -1614,6 +1650,18 @@ subroutine physics_state_alloc(state,lchnk,psetcols)
   allocate(state%te_cur(psetcols), stat=ierr)
   if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%te_cur')
 
+
+  allocate(state%cpterme(psetcols), stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%te_cur')
+  allocate(state%cptermp(psetcols), stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%te_cur')
+  allocate(state%tebefore_dme(psetcols), stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%te_cur')  
+  allocate(state%teafter_dme(psetcols), stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%te_cur')
+
+
+
   allocate(state%tw_ini(psetcols), stat=ierr)
   if ( ierr /= 0 ) call endrun('physics_state_alloc error: allocation error for state%tw_ini')
 
@@ -1683,6 +1731,14 @@ subroutine physics_state_alloc(state,lchnk,psetcols)
   state%te_cur(:) = inf
   state%tw_ini(:) = inf
   state%tw_cur(:) = inf
+
+
+  state%cptermp(:) = 0.0
+  state%cpterme(:) = 0.0
+  state%tebefore_dme(:) = 0.0
+  state%teafter_dme(:) = 0.0
+
+
 #define te_analysis
 #ifdef te_analysis
   state%te_ini_diag(:,:) = inf
@@ -1793,6 +1849,19 @@ subroutine physics_state_dealloc(state)
   deallocate(state%te_cur, stat=ierr)
   if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%te_cur')
 
+
+
+  deallocate(state%cpterme, stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%te_cur')
+    deallocate(state%cptermp, stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%te_cur')
+    deallocate(state%tebefore_dme, stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%te_cur')
+    deallocate(state%teafter_dme, stat=ierr)
+  if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%te_cur')
+
+
+
   deallocate(state%tw_ini, stat=ierr)
   if ( ierr /= 0 ) call endrun('physics_state_dealloc error: deallocation error for state%tw_ini')
 
diff --git a/src/physics/cam/physpkg.F90 b/src/physics/cam/physpkg.F90
index 62fbece3..07ca72a4 100644
--- a/src/physics/cam/physpkg.F90
+++ b/src/physics/cam/physpkg.F90
@@ -1754,7 +1754,7 @@ contains
     !-------------- Energy budget checks vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
 
     ! Save total energy for global fixer in next timestep (FV and SE dycores)
-    call pbuf_set_field(pbuf, teout_idx, state%te_cur, (/1,itim_old/),(/pcols,1/))
+!    call pbuf_set_field(pbuf, teout_idx, state%te_cur, (/1,itim_old/),(/pcols,1/))
 
     if (shallow_scheme .eq. 'UNICON') then
 
@@ -1785,6 +1785,9 @@ contains
     tmp_cldliq(:ncol,:pver) = state%q(:ncol,:pver,ixcldliq)
     tmp_cldice(:ncol,:pver) = state%q(:ncol,:pver,ixcldice)
 
+
+!PL code and output
+#if 0
     ! For not 'FV', physics_dme_adjust is called for energy diagnostic purposes only.  So, save off tracers
     if (.not.dycore_is('FV').and.&
          (hist_fld_active('SE_pAM').or.hist_fld_active('KE_pAM').or.hist_fld_active('WV_pAM').or.&
@@ -1816,6 +1819,57 @@ contains
       state%pdel(:ncol,:pver)     = tmp_pdel(:ncol,:pver)
       state%ps(:ncol)             = tmp_ps(:ncol)
     end if
+#endif
+
+
+
+!#undef ADDCP
+#define ADDCP
+
+!OG remove cp terms from TE
+!orig, tbot, tbot
+    state%cpterme(:ncol) =          cpair * state%t(:ncol,pver)     * cam_in%cflx(:ncol,1)
+    state%cptermp(:ncol) = 1000.0 * cpair * state%t(:ncol,pver)     * (cam_out%precl(:ncol) + cam_out%precc(:ncol) )
+#ifdef ADDCP
+!take CP term out of te_cur
+    state%te_cur(:ncol) = state%te_cur(:ncol) - state%cptermp(:ncol)*ztodt &
+                                              + state%cpterme(:ncol)*ztodt
+#endif
+
+!OG this is to show that fixer is approx. DME adjust
+#if 1 
+    if (.not.dycore_is('FV')) then
+!first 7 is enough?            
+      tmp_trac(:ncol,:pver,:pcnst) = state%q(:ncol,:pver,:pcnst)
+      tmp_pdel(:ncol,:pver)        = state%pdel(:ncol,:pver)
+      tmp_ps(:ncol)                = state%ps(:ncol)
+
+      if (dycore_is('SE')) call set_dry_to_wet(state)
+
+!save current TE
+      state%tebefore_dme(:ncol) = state%te_cur(:ncol)
+
+      call physics_dme_adjust(state, tend, qini, ztodt)
+
+!recompute TE, it also prob computes tw or something else
+!assume that tw and anything else does not affect run
+      call check_energy_chng(state, tend, "drymass__", nstep, ztodt, zero, zero, zero, zero)
+      state%teafter_dme(:ncol) = state%te_cur(:ncol)
+
+!reverse TE to TE before pressure adjustment
+!comment this line when discarding PW, to show that the dycore is small
+      state%te_cur(:ncol) = state%tebefore_dme(:ncol)
+
+      state%q(:ncol,:pver,:pcnst) = tmp_trac(:ncol,:pver,:pcnst)
+      state%pdel(:ncol,:pver)     = tmp_pdel(:ncol,:pver)
+      state%ps(:ncol)             = tmp_ps(:ncol)
+    end if
+#endif
+
+    ! Save total energy for global fixer in next timestep (FV and SE dycores)
+    call pbuf_set_field(pbuf, teout_idx, state%te_cur, (/1,itim_old/),(/pcols,1/))
+
+
 
     if (dycore_is('LR')) then
 
 last 10 commits are ------------- 
89e964597ea07e5da6191f5038d1b3e487a45b7d fix various bugs and start cleaning up ncl scripts
cf6dd3965e28a5b0248cfbdd4f9b32edc35c9e77 add diagnostic scripts
5a5280ede2688e42f2c569756729a717fa202a93 add new diagnostics
998186e96b00e3b18803a4dcf5a2e409e8aec8ae moving energy diagnostic code to cam6_3_28. Add scripts to my_scripts directory
1ee4f1ad101ae59f2f9872b5e2aeeb0e2484cb9d stable configuration
d60228c85c5c6bd590a47ed41bf2d11990110bfb merge branch cam_development from pel fork
75080a9ebef7b5b371423e804058e5cb21e9bb70 Merge pull request #107 from Katetc/mg_move_to_external
67e865e9a815954b7c8287769799c09ae6d1e3a2 Merge pull request #134 from jtruesdal/scam130
5127458be92b2024229505017729b602ab012231 Merge pull request #135 from nusbaume/ghub_issue_close_action
e2cffd7dd568209ca4984922401ddc71978feb63 Merge pull request #83 from nusbaume/ghub_issue_close_action
